<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.picmap.app.comment.CommentMapper">
    
    <!-- 게시글의 전체 댓글 수를 조회하는 SQL -->
	<select id="getTotalCount" parameterType="CommentsDTO" resultType="java.lang.Long">
		SELECT	COUNT(COMMENTNUM)  <!-- 댓글 수를 세는 COUNT 쿼리 -->
		FROM	COMMENTS           <!-- COMMENTS 테이블에서 -->
		WHERE	BOARDNUM = #{boardNum}  <!-- 특정 게시글 번호에 해당하는 댓글만 조회 -->
	</select>

    
	<!-- 특정 게시글의 댓글 목록을 조회하고 각 댓글의 답글 수를 포함하는 SQL -->
		<select id="findByBoardNum" parameterType="java.util.Map" resultType="CommentsDTO">
		    SELECT c.*, 
		           m.PROFILEPATH, 
		           m.MEMBERNICKNAME,
		           (SELECT COUNT(*) FROM REPLY r WHERE r.COMMENTNUM = c.COMMENTNUM) AS replyCount
		    FROM (
		        SELECT c.*, ROWNUM r
		        FROM (
		            SELECT * 
		            FROM COMMENTS 
		            WHERE BOARDNUM = #{commentsDTO.boardNum}
		            ORDER BY CREATEDATE DESC, UPDATEDATE DESC
		        ) c
		    ) c
		    JOIN MEMBER m ON c.MEMBERNUM = m.MEMBERNUM
		    WHERE c.r BETWEEN #{scroller.startRow} AND #{scroller.endRow}
		    ORDER BY c.UPDATEDATE DESC, c.CREATEDATE DESC
		</select>
		
		<select id="countReply" parameterType="CommentsDTO" resultType="java.lang.Long">
			SELECT	COUNT(*)
			FROM	REPLY r 
			WHERE	r.COMMENTNUM = #{commentNum}
		</select>

   
  
    <!-- 특정 댓글을 ID로 조회하는 SQL -->
    <select id="findById" parameterType="long" resultType="CommentDTO">
        SELECT * FROM COMMENTS WHERE COMMENTNUM = #{commentNum}  <!-- 댓글 ID로 댓글을 조회 -->
    </select>
  
    <!-- 새로운 댓글을 추가하는 SQL -->
    <insert id="insertComment" parameterType="CommentsDTO">
        INSERT INTO COMMENTS (COMMENTNUM, BOARDNUM, MEMBERNUM, CONTENT, CREATEDATE, UPDATEDATE)
        VALUES (COMMENTNUM_SEQ.NEXTVAL, #{boardNum}, #{memberNum}, #{content}, SYSDATE, SYSDATE)
        <!-- 댓글을 추가할 때, 시퀀스를 사용하여 댓글 번호를 생성하고, 작성 및 수정 날짜를 현재 날짜로 설정 -->
    </insert>
  
    <!-- 특정 댓글에 대한 대댓글 목록을 조회하는 SQL -->
    <select id="findRepliesByCommentNum" parameterType="map" resultType="ReplyDTO">
    	SELECT *
		FROM (
		SELECT ROWNUM r, r2.*
		FROM (	
				SELECT  r.*, m.PROFILEPATH, m.MEMBERNICKNAME  <!-- 대댓글 데이터와 프로필 이미지 경로를 선택 -->
				FROM REPLY r
				JOIN MEMBER m ON r.MEMBERNUM = m.MEMBERNUM  <!-- 대댓글 작성자와 회원을 조인 -->
				WHERE r.COMMENTNUM = #{commentNum}  <!-- 특정 댓글의 대댓글만 선택 -->
				ORDER BY r.UPDATEDATE DESC, r.CREATEDATE DESC  <!-- 최신 대댓글 순으로 정렬 -->
					) r2
			)
		WHERE r BETWEEN #{scroller.startRow} AND #{scroller.endRow}	
	</select>
	
    
	
    <!-- 대댓글을 추가하는 SQL -->
    <insert id="insertReply" parameterType="ReplyDTO">
        INSERT INTO REPLY (REPLYNUM, COMMENTNUM, MEMBERNUM, CONTENT, CREATEDATE, UPDATEDATE)
        VALUES (REPLY_SEQ.NEXTVAL, #{commentNum}, #{memberNum}, #{content}, SYSDATE, SYSDATE)
        <!-- 대댓글을 추가할 때, 시퀀스를 사용하여 대댓글 번호를 생성하고, 작성 및 수정 날짜를 현재 날짜로 설정 -->
    </insert>
 	
    <!-- 대댓글을 수정하는 SQL -->
    <update id="updateReply" parameterType="ReplyDTO">
        UPDATE REPLY
        SET CONTENT = #{content}, UPDATEDATE = SYSDATE	<!-- 대댓글 내용을 수정하고 수정 날짜를 현재 날짜로 설정 -->
        WHERE REPLYNUM = #{replyNum} AND MEMBERNUM = #{memberNum}  <!-- 특정 대댓글 번호와 회원 번호로 필터링 -->
    </update>	

    <!-- 대댓글을 삭제하는 SQL -->
    <delete id="deleteReply" parameterType="ReplyDTO">
        DELETE FROM REPLY WHERE REPLYNUM = #{replyNum} AND MEMBERNUM = #{memberNum}  <!-- 특정 대댓글을 삭제 -->
    </delete>
 
    <!-- 댓글을 수정하는 SQL -->
    <update id="updateComment" parameterType="CommentsDTO">
        UPDATE COMMENTS
        SET CONTENT = #{content}, UPDATEDATE = SYSDATE  <!-- 댓글 내용을 수정하고 수정 날짜를 현재 날짜로 설정 -->
        WHERE COMMENTNUM = #{commentNum} AND MEMBERNUM = #{memberNum}  <!-- 특정 댓글 번호와 회원 번호로 필터링 -->
    </update>
  
    <!-- 댓글을 삭제하는 SQL -->
    <delete id="deleteComment" parameterType="CommentsDTO">
        DELETE FROM COMMENTS WHERE COMMENTNUM = #{commentNum} AND MEMBERNUM = #{memberNum}  <!-- 특정 댓글을 삭제 -->
    </delete>
  
</mapper>

